@model IAAITW.Models.CMSAccount

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/CMS/Views/Shared/_Layout.cshtml";
}

<div class="card-header">
    <h5>基本資料編輯</h5>
</div>

<div class="card-block">
    @using (Html.BeginForm("Edit", "Accounts", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                <div style="padding: 0px 0px 15px 15px; ">
                    <img src="~/upload/headshot/@Html.DisplayFor(model => model.Headshot)" width="100" height="100" class="img-radius" alt="Headshot" />
                </div>
                <div class="col-md-10">
                    <input type="file" name="file" />
                </div>
            </div>

            <br>

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    @Html.Label("(若不需重設密碼，欄位保留空白即可)")
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IdentityId, "身份別", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("IdentityId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IdentityId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Permission, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.HiddenFor(model => model.Permission, new { htmlAttributes = new { @class = "form-control" } })
                    <div class="hiTree">
                    </div>
                </div>
            </div>

            <div class="form-group mt-5">
                <div class="col-md-offset-2 col-md-10">
                    @Html.ActionLink("返回", "Index", null, htmlAttributes: new { @class = "btn btn-light" })
                    <input type="submit" value="儲存" class="btn btn-primary" />
                </div>
            </div>
        </div>
    }
</div>

<script src="~/Scripts/dist/tree.min.js"></script>
<script>
    // prettier-ignore
    let data = @Html.Raw(ViewBag.Tree);

    let tree = new Tree('.hiTree', {
        data: data,
        closeDepth: 3,                                          // 表示當樹狀結構被載入後，預設打開到第3層的節點
        loaded: function () {                                   // loaded 是一個函式，當樹狀結構載入完成時會被呼叫。
            /*     this.values = ['0-0-0', '0-1-1'];                 // 此兩個節點（'0-0-0' 和 '0-1-1'）為選取狀態*/
            this.values = @Html.Raw(ViewBag.Default);
            console.log(this.selectedNodes);
            console.log(this.values);
            this.disables = ['0-0-0', '0-0-1', '0-0-2']         // 此三個節點（'0-0-0', '0-0-1', '0-0-2'）為禁用狀態。
        },
        onChange: function () {                                 // onChange 是一個函式，當樹狀結構的選取狀態變動時會被呼叫。
            console.log(this.values);
            $("#Permission").val(this.values);                  // 程式碼將目前選取的節點寫入 id 為 "Permission" 的 HTML 元素。
        }
    })
</script>